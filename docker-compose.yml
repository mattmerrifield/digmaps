version: '3'
services:
  db:
    build: "./db"
    volumes:
      # SQL files here get executed when the container first starts
      - "./db/data:/docker-entrypoint-initdb.d/"
      # Anonymous volume for the database data goes here, so it persists between up/down restarts
      - "/var/lib/postgresql/data"

  api:
    build: "./api"
    volumes:
      - ./api:/code
      - ./api/static:/static
    restart: always
    depends_on:
      - db
    ports:
      - "8000:8000"
    command: "python manage.py runserver_plus 0.0.0.0:8000"

  jupyter:
    container_name: jupyter
    build: "./api"
    ports:
      - "8888:8888"  # Expose directly. Websockets do not play nicely with nginx proxy_pass
    volumes:
      - .:/code
    command: "python3 api/manage.py shell_plus --notebook"
    depends_on:
      - db

  ts:
    build: "./ts"
    env_file:
      - './ts/.env'
    ports:
      # Warm reloading of the project is done by using a websocket to notify the frontend
      # of file changes
      - 35729:35729
    volumes:
      - ./ts/src:/code/src
      - ./ts/build:/code/build
      - ./ts/public:/code/public
      # Persist the library directory in an anonymous volume
      # This makes rebuilds faster, at the risk of some confusion
      # You should be able to resolve issues by blowing away the whole container and starting from scratch
      - /code/node_modules

  web:
    build: "./web"
    ports:
      - "80:80"
    volumes:
      - ./ts/dist:/usr/share/nginx/ts          # Shared volume for compiled code
      - ./web/static:/usr/share/nginx/static
      - ./web/conf:/etc/nginx
    depends_on:
      - api
      - db
      - ts







