#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

###################
# Building blocks #
###################
# One compose file full of the system dependencies
COMPOSE_FILE=$DIR/docker-compose.yml;

# Another compose file for scriptable one-off things
DEVTOOLS_COMPOSE=$DIR/docker-compose-devtools.yml

function dc() {
    # Alias to docker compose that always chooses the right
    # compose file
    docker-compose -f $COMPOSE_FILE $@
}

function dc_dev() {
    # Run devtools stuff
    docker-compose -f $DEVTOOLS_COMPOSE $@
}

function dc_all() {
    docker-compose -f $COMPOSE_FILE -f $DEVTOOLS_COMPOSE $@
}


function dc_do() {
    # Runs the given command in docker-compose in an existing
    # container if there is one, or spins up a new one if there
    # isn't.
    #
    # Among other things, this lets us keep the DB up and
    # running all the time, but bring up the API, front-end
    # compiler, or the web container only temporarily to run
    # a specific command
    local CONTAINER_ID=$(docker-compose ps -q $1)
    if [[ "$CONTAINER_ID" != "" ]]; then
        echo "$1 has been created"
        if [ -z `docker ps -q --no-trunc | grep $(docker-compose ps -q $1)` ]; then
          echo "it's not running."
          local do="run --rm"
        else
          echo "it's already running."
          local do=exec
        fi
    else
        echo "$1 has not been created"
        local do=run
    fi
    dc $do $@
}

################
# Docker Tasks #
################
# Some commands we want to pass straight through to docker-compose

# We usually want to build, start, and stop specific containers
function build() { dc_all build $@; }
function start() { dc_all start $@; }
function stop() { dc_all stop $@; }
function restart() { dc_all restart $@; }
function logs() { dc_all logs $@; }

# Pass up/down to just the site-specific containers
function up() { dc up $@; }
function down() { dc down $@; }
function ps() { dc ps $@; }

function bash() {
    # Grab a bash shell on the named container (api by default)
    local container_name=${1:-api};
    # Pass the rest of the args to bash directly
    if [ "$#" != "0" ]; then
        shift;
    fi
    dc_do $container_name bash $@;
}

################
# Python Tasks #
################
function pip_freeze() {
    # Update pip requirements
    local requirements_file=$(DIR/api/frozen_requirements.txt)
    echo "Freezing pip requirements to $requirements_file";
    dc_do api pip freeze > $requirements_file;
    echo "Done"
}

function manage () {
    # Run the django management command in the API container
    dc_do api python manage.py $@;
}



function black() {
    # Python code formatter.
    # You can wear any color you like as long as it's black.
    dc_dev run black-formatter $@
}

####################
# Typescript Tasks #
####################

function npm() {
    dc run ts npm $@
}

function compile() {
    dc_dev run ts-compile $@
}


##################
# Database Tasks #
##################
function dbshell() {
    # Get a database shell in the existing docker container
    dc_do db psql --user postgres;
}

function dbinit() {
    # Get a database shell in the existing docker container
    manage migrate
    manage load_excel data.xlsx
}


########
# MAIN #
########
# This "$@" construct means we will run this file as if it were a
# standalone script. The first argument will be the command to run
# (which should be a function from within the file) and the rest
# of the args are passed to that command.
"$@"